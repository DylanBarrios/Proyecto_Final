package fynal.project;

import java.util.Random;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Usuario
 */
public class MainWindow extends javax.swing.JFrame {
    PlayersDialog pd;
    ReportsDialog rd;
    private Random ale = new Random();
    ReportsDialog rp = new ReportsDialog();
    private TypeField matrixField[][];
    private JButton matrixBtt[][];
    private int x,y,poInitX,poInitY;
    private int diceMov;
    DefaultTableModel dtm;
    TypeField posan;
    private String mensaje;
    public int anterior;
    
    public MainWindow() {
        pd = new PlayersDialog();
        rd = new ReportsDialog();
        this.setResizable(false);
        initComponents();
        bttAddVehicles.setEnabled(false);
    }

    //Metodo qeu me envia el numero del archivo que haya elejido para jugar
    public void sacarTexto(){
        tmp tm = new tmp();
        System.out.println("El valor es "+tm.getTmp());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelBattle = new javax.swing.JPanel();
        PanelButtons = new javax.swing.JPanel();
        bttUP = new javax.swing.JButton();
        BttLeft = new javax.swing.JButton();
        bttRight = new javax.swing.JButton();
        bttDown = new javax.swing.JButton();
        ComboPlayer2 = new javax.swing.JComboBox();
        ComboPlayer1 = new javax.swing.JComboBox();
        diceMovementsGUI = new javax.swing.JLabel();
        diceShotGUI = new javax.swing.JLabel();
        diceWildcardGUI = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Player1 = new javax.swing.JLabel();
        Player2 = new javax.swing.JLabel();
        bttAddVehicles = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txt2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenuItem17 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        PanelBattle.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout PanelBattleLayout = new javax.swing.GroupLayout(PanelBattle);
        PanelBattle.setLayout(PanelBattleLayout);
        PanelBattleLayout.setHorizontalGroup(
            PanelBattleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1023, Short.MAX_VALUE)
        );
        PanelBattleLayout.setVerticalGroup(
            PanelBattleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        PanelButtons.setBackground(new java.awt.Color(255, 255, 255));

        bttUP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/ArrowUP.png"))); // NOI18N
        bttUP.setBorder(null);
        bttUP.setContentAreaFilled(false);
        bttUP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttUPActionPerformed(evt);
            }
        });

        BttLeft.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/ArrowLeft.png"))); // NOI18N
        BttLeft.setBorder(null);
        BttLeft.setContentAreaFilled(false);
        BttLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BttLeftActionPerformed(evt);
            }
        });

        bttRight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/ArrowRight.png"))); // NOI18N
        bttRight.setBorder(null);
        bttRight.setContentAreaFilled(false);
        bttRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttRightActionPerformed(evt);
            }
        });

        bttDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/ArrowDown.png"))); // NOI18N
        bttDown.setBorder(null);
        bttDown.setContentAreaFilled(false);
        bttDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttDownActionPerformed(evt);
            }
        });

        ComboPlayer2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose a vehicle" }));

        ComboPlayer1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose a Vehicle" }));
        ComboPlayer1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboPlayer1ActionPerformed(evt);
            }
        });

        diceMovementsGUI.setFont(new java.awt.Font("Monotype Corsiva", 1, 48)); // NOI18N
        diceMovementsGUI.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        diceMovementsGUI.setText("DICE");
        diceMovementsGUI.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        diceShotGUI.setFont(new java.awt.Font("Monotype Corsiva", 1, 48)); // NOI18N
        diceShotGUI.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        diceShotGUI.setText("DICE");

        diceWildcardGUI.setFont(new java.awt.Font("Monotype Corsiva", 1, 48)); // NOI18N
        diceWildcardGUI.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        diceWildcardGUI.setText("DICE");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel1.setText("AMOUNT OF MOVEMENTS");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("shooting percentage");

        jLabel2.setFont(new java.awt.Font("Monotype Corsiva", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("MOVE");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("wildcard");

        Player1.setText("Player 1");

        Player2.setText("Player 2");

        bttAddVehicles.setBackground(new java.awt.Color(0, 204, 204));
        bttAddVehicles.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        bttAddVehicles.setForeground(new java.awt.Color(255, 255, 255));
        bttAddVehicles.setText("Add Vehicles");
        bttAddVehicles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttAddVehiclesActionPerformed(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Rhombus_34545.png"))); // NOI18N

        txt2.setText("jLabel6");

        javax.swing.GroupLayout PanelButtonsLayout = new javax.swing.GroupLayout(PanelButtons);
        PanelButtons.setLayout(PanelButtonsLayout);
        PanelButtonsLayout.setHorizontalGroup(
            PanelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelButtonsLayout.createSequentialGroup()
                        .addComponent(Player1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Player2)
                        .addGap(124, 124, 124))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelButtonsLayout.createSequentialGroup()
                        .addGroup(PanelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelButtonsLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(bttAddVehicles))
                            .addComponent(diceWildcardGUI, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(79, 79, 79))
                    .addGroup(PanelButtonsLayout.createSequentialGroup()
                        .addComponent(txt2)
                        .addGap(17, 17, 17)
                        .addGroup(PanelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelButtonsLayout.createSequentialGroup()
                                .addComponent(ComboPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ComboPlayer2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(PanelButtonsLayout.createSequentialGroup()
                                .addGap(94, 94, 94)
                                .addGroup(PanelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(PanelButtonsLayout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(bttUP, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelButtonsLayout.createSequentialGroup()
                        .addGap(0, 33, Short.MAX_VALUE)
                        .addGroup(PanelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelButtonsLayout.createSequentialGroup()
                                .addGroup(PanelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(diceMovementsGUI, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(diceShotGUI, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(86, 86, 86))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelButtonsLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(105, 105, 105))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelButtonsLayout.createSequentialGroup()
                                .addGroup(PanelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(PanelButtonsLayout.createSequentialGroup()
                                        .addComponent(BttLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 27, 27)
                                        .addComponent(jLabel3)
                                        .addGap(18, 18, 18)
                                        .addComponent(bttRight, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(54, 54, 54))))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelButtonsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bttDown, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(145, 145, 145))
        );
        PanelButtonsLayout.setVerticalGroup(
            PanelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bttUP, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(PanelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(BttLeft)
                    .addComponent(bttRight)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bttDown, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(diceMovementsGUI, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(diceShotGUI, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(diceWildcardGUI, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bttAddVehicles)
                .addGap(17, 17, 17)
                .addGroup(PanelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Player1)
                    .addComponent(Player2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(PanelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComboPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComboPlayer2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );

        jMenu1.setText("BattleField");

        jMenu7.setText("New Game");

        jMenu3.setText("4 X 4 ");
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });

        jMenuItem4.setText("Player vs Computer");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuItem5.setText("Player vs Player");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenu7.add(jMenu3);

        jMenu4.setText("6 X 4");

        jMenuItem1.setText("Player vs Computer");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem1);

        jMenuItem7.setText("Player vs Player");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem7);

        jMenu7.add(jMenu4);

        jMenu6.setText("8 X 9");

        jMenuItem6.setText("Player vs Computer");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem6);

        jMenuItem8.setText("Player vs Player");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem8);

        jMenu7.add(jMenu6);

        jMenu1.add(jMenu7);

        jMenuItem9.setText("Load Game");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem9);

        jMenuItem10.setText("Save Game");
        jMenu1.add(jMenuItem10);

        jMenuItem3.setText("Clear");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Reports");

        jMenuItem2.setText("Vehicles reports");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem11.setText("Battle Reports");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem11);

        jMenuItem12.setText("Best Vehicle");
        jMenu2.add(jMenuItem12);

        jMenuItem13.setText("Worst Vehicle");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem13);

        jMenuBar1.add(jMenu2);

        jMenu8.setText("More Optiones");

        jMenuItem15.setText("Shop Store");
        jMenu8.add(jMenuItem15);

        jMenuItem16.setText("Create Vehicles");
        jMenu8.add(jMenuItem16);

        jMenuItem17.setText("Create Weapons");
        jMenu8.add(jMenuItem17);

        jMenuBar1.add(jMenu8);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(PanelBattle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PanelButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(PanelButtons, javax.swing.GroupLayout.PREFERRED_SIZE, 947, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PanelBattle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bttUPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttUPActionPerformed
        mensaje = ComboPlayer1.getSelectedItem().toString();
        clear();
        movements();
        shot();
        diceWildcardGUI.setText("NOT");
        poInitY-=diceMov;
        if(poInitY<0){
            poInitY+=diceMov;
            addPanel();
            JOptionPane.showMessageDialog(rootPane,"Out of Matrix");
        }
        else if( mensaje.equals("War Tank")&&(matrixField[poInitX][poInitY] instanceof Lake || matrixField[poInitX][poInitY] instanceof Enemies)){
            poInitY+=diceMov;
            addPanel();
            JOptionPane.showMessageDialog(rootPane, "A tank can not be on the water or on an enemy");
        }
        else if( mensaje.equals("War Plane")&&(matrixField[poInitX][poInitY] instanceof Mountain || matrixField[poInitX][poInitY] instanceof Enemies)){
            poInitY+=diceMov;
            addPanel();
            JOptionPane.showMessageDialog(rootPane, "A Plane can not be on the Mountains or on an enemy");
        }else{
            poInitY+=diceMov;
            //Me imprime donde estaba antes
            matrixField[poInitX][poInitY] = posan;
            poInitY-=diceMov;
            //Me guarda el nuevo campo
            posan = matrixField[poInitX][poInitY];
            //Me configura el nuevo lugar
            matrixField[poInitX][poInitY] = pd.one;
            addPanel();
        }
    }//GEN-LAST:event_bttUPActionPerformed

    private void ComboPlayer1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboPlayer1ActionPerformed
        
    }//GEN-LAST:event_ComboPlayer1ActionPerformed

    //Introduzco el numero de archivo sleccionado para cargar juego
    //a una varibale qeu esta en otra clase
    private void set(){
        tmp tm = new tmp();
        txt2.setText(tm.getTmp());
    }
    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        pd.TextFieldP2.setEnabled(false);
        pd.TextFieldP1.setText(null);
        pd.TextFieldP2.setText(null);
        clear();
        pd.setVisible(true);
        newBattliedfield4();
        bttAddVehicles.setEnabled(true);
        ComboPlayer1.removeAllItems();
        ComboPlayer1.addItem("Choose a Vehicle");
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        pd.TextFieldP2.setEnabled(true);
        pd.TextFieldP1.setText(null);
        pd.TextFieldP2.setText(null);
        clear();
        pd.setVisible(true);
        newBattliedfield4();
        bttAddVehicles.setEnabled(true);
        ComboPlayer1.removeAllItems();
        ComboPlayer1.addItem("Choose a Vehicle");
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed

    }//GEN-LAST:event_jMenu3ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        pd.TextFieldP2.setEnabled(false);
        pd.TextFieldP1.setText(null);
        pd.TextFieldP2.setText(null);
        clear();
        pd.setVisible(true);
        newBattliedfield6();
        bttAddVehicles.setEnabled(true);
        ComboPlayer1.removeAllItems();
        ComboPlayer1.addItem("Choose a Vehicle");
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        pd.TextFieldP2.setEnabled(true);
        pd.TextFieldP1.setText(null);
        pd.TextFieldP2.setText(null);
        clear();
        pd.setVisible(true);
        newBattliedfield6();
        bttAddVehicles.setEnabled(true);
        ComboPlayer1.removeAllItems();
        ComboPlayer1.addItem("Choose a Vehicle");
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        pd.TextFieldP2.setEnabled(false);
        pd.TextFieldP1.setText(null);
        pd.TextFieldP2.setText(null);
        clear();
        pd.setVisible(true);
        newBattliedfield8();
        bttAddVehicles.setEnabled(true);
        ComboPlayer1.removeAllItems();
        ComboPlayer1.addItem("Choose a Vehicle");
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        pd.TextFieldP2.setEnabled(true);
        pd.TextFieldP1.setText(null);
        pd.TextFieldP2.setText(null);
        clear();
        pd.setVisible(true);
        newBattliedfield8();
        bttAddVehicles.setEnabled(true);
        ComboPlayer1.removeAllItems();
        ComboPlayer1.addItem("Choose a Vehicle");
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        clear();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        rd.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void bttAddVehiclesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttAddVehiclesActionPerformed
        addVehicles();
        bttAddVehicles.setEnabled(false);
    }//GEN-LAST:event_bttAddVehiclesActionPerformed

    private void bttRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttRightActionPerformed
        mensaje = ComboPlayer1.getSelectedItem().toString();
        clear();
        movements();
        shot();
        diceWildcardGUI.setText("NOT");
        poInitX+=diceMov;
        if(poInitX>(x-1)){
            poInitX-=diceMov;
            addPanel();
            JOptionPane.showMessageDialog(rootPane, "Out of Matrix");
        }
        else if( mensaje.equals("War Tank")&&(matrixField[poInitX][poInitY] instanceof Lake || matrixField[poInitX][poInitY] instanceof Enemies)){
            poInitX-=diceMov;
            addPanel();
            JOptionPane.showMessageDialog(rootPane, "A tank can not be on the water or on an enemy");
        }
        else if( mensaje.equals("War Plane")&&(matrixField[poInitX][poInitY] instanceof Mountain || matrixField[poInitX][poInitY] instanceof Enemies)){
            poInitX-=diceMov;
            addPanel();
            JOptionPane.showMessageDialog(rootPane, "A Plane can not be on the Mountains or on an enemy");
        }else{
            poInitX-=diceMov;
            //Me imprime donde estaba antes
            matrixField[poInitX][poInitY] = posan;
            poInitX+=diceMov;
            //Me guarda el nuevo campo
            posan = matrixField[poInitX][poInitY];
            //Me configura el nuevo lugar
            matrixField[poInitX][poInitY] = pd.one;
            addPanel();
        }
    }//GEN-LAST:event_bttRightActionPerformed

    private void BttLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BttLeftActionPerformed
        mensaje = ComboPlayer1.getSelectedItem().toString();
        clear();
        movements();
        shot();
        diceWildcardGUI.setText("NOT");
        poInitX-=diceMov;
        if(poInitX<0){
            poInitX+=diceMov;
            addPanel();
            JOptionPane.showMessageDialog(rootPane, "Out of Matrix");
        }
        else if( mensaje.equals("War Tank")&&(matrixField[poInitX][poInitY] instanceof Lake || matrixField[poInitX][poInitY] instanceof Enemies)){
            poInitX+=diceMov;
            addPanel();
            JOptionPane.showMessageDialog(rootPane, "A tank can not be on the water or on an enemy");
        }
        else if( mensaje.equals("War Plane")&&(matrixField[poInitX][poInitY] instanceof Mountain || matrixField[poInitX][poInitY] instanceof Enemies)){
            poInitX+=diceMov;
            addPanel();
            JOptionPane.showMessageDialog(rootPane, "A Plane can not be on the Mountains or on an enemy");
        }else{
            poInitX+=diceMov;
            //Me imprime donde estaba antes
            matrixField[poInitX][poInitY] = posan;
            poInitX-=diceMov;
            //Me guarda el nuevo campo
            posan = matrixField[poInitX][poInitY];
            //Me configura el nuevo lugar
            matrixField[poInitX][poInitY] = pd.one;
            addPanel();
        }
    }//GEN-LAST:event_BttLeftActionPerformed

    private void bttDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttDownActionPerformed
        mensaje = ComboPlayer1.getSelectedItem().toString();
        clear();
        movements();
        shot();
        diceWildcardGUI.setText("NOT");
        poInitY+=diceMov;
        if(poInitY>(y-1)){
            poInitY-=diceMov;
            addPanel();
            JOptionPane.showMessageDialog(rootPane, "Out of Matrix");
        }
        else if( mensaje.equals("War Tank")&&(matrixField[poInitX][poInitY] instanceof Lake || matrixField[poInitX][poInitY] instanceof Enemies)){
            poInitY-=diceMov;
            addPanel();
            JOptionPane.showMessageDialog(rootPane, "A tank can not be on the water or on an enemy");
        }
        else if( mensaje.equals("War Plane")&&(matrixField[poInitX][poInitY] instanceof Mountain || matrixField[poInitX][poInitY] instanceof Enemies)){
            poInitY-=diceMov;
            addPanel();
            JOptionPane.showMessageDialog(rootPane, "A Plane can not be on the Mountains or on an enemy");
        }else{
        poInitY-=diceMov;
        //Me imprime donde estaba antes
        matrixField[poInitX][poInitY] = posan;
        poInitY+=diceMov;
        //Me guarda el nuevo campo
        posan = matrixField[poInitX][poInitY];
        //Me configura el nuevo lugar
        matrixField[poInitX][poInitY] = pd.one;
        addPanel();
        }
    }//GEN-LAST:event_bttDownActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        bttAddVehicles.setEnabled(true);
        rd.setVisible(true);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    //Me limpia todo lo que tenga en matriz del juego
    public void clear(){
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < y; j++) {
               PanelBattle.remove(matrixBtt[i][j]);
            }
        }
        repaint();
    }
    
    //Metodos que me serviran para indicar tamaño a mis matrices
    private void newBattliedfield4() {
        battliedfield(4, 4);
    }
    
    private void newBattliedfield6() {
        battliedfield(6, 4);
    }
    private void newBattliedfield8() {
        battliedfield(9, 8);
    }
    
    //Metodo que resive el tamaño de la matriz que desee
    private void battliedfield(int x, int y){
        this.x = x;
        this.y = y;
        matrixField = new TypeField[x][y];
        matrixBtt = new JButton[x][y];
        createMatrix();
    }
    
    //Me genera una matriz de instancias qeu me serviran para comparar al momento
    //de estar jugando
    private void createMatrix(){
        int instances = 0;
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < y; j++) {
                instances = ale.nextInt(3);
                switch(instances){
                    case 0:
                        matrixField[i][j] = new Grass();
                    break;
                    case 1:
                        matrixField[i][j] = new Mountain();
                    break;
                    case 2:
                        matrixField[i][j] = new Lake();
                    break;
                }
            }
        }
        
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < 2; j++) {
                instances = ale.nextInt(5);
                switch(instances){
                case 0:
                   break;
                case 1:
                   matrixField[i][j] = new Enemies();
                   break;
                case 2:
                    break;
                case 3:
                    matrixField[i][j] = new Enemies();
                    break;
                case 4:
                    break;    
                }
            }        
        }
      
      poInitX=0;
      poInitY=3;
      posan = matrixField[poInitX][poInitY];  
      matrixField[poInitX][poInitY] = pd.one;
      addPanel();
    }
    
    //Metodo que me va a poner imagenes dependeindo de la instancia qeu tengan
    private void addPanel() {
        mensaje = ComboPlayer1.getSelectedItem().toString();
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < y; j++) {
                matrixBtt[i][j] = new JButton();
                matrixBtt[i][j].setSize(100, 100);     
                matrixBtt[i][j].setLocation(i*110, j*110);
                
                if(matrixField[i][j] instanceof Grass)
                    matrixBtt[i][j].setIcon(new ImageIcon("src/Imagenes/Grass.jpg"));
                else if(matrixField[i][j] instanceof Mountain)
                    matrixBtt[i][j].setIcon(new ImageIcon("src/Imagenes/Mountain.jpg"));
                else if(matrixField[i][j] instanceof Lake)
                    matrixBtt[i][j].setIcon(new ImageIcon("src/Imagenes/Lake.jpg"));
                else if(matrixField[i][j] instanceof Vehicles&&mensaje.equals("War Plane"))
                    matrixBtt[poInitX][poInitY].setIcon(new ImageIcon("src/Imagenes/plane.jpg"));
                else if(matrixField[i][j] instanceof Vehicles&&mensaje.equals("War Tank"))
                    matrixBtt[poInitX][poInitY].setIcon(new ImageIcon("src/Imagenes/tank.jpg"));
                else if(matrixField[i][j] instanceof Enemies)
                    matrixBtt[i][j].setIcon(new ImageIcon("src/Imagenes/Enemy.jpg"));
                else
                    matrixBtt[poInitX][poInitY].setIcon(new ImageIcon("src/Imagenes/plane.jpg"));
                    
                matrixBtt[i][j].setVisible(true);
                PanelBattle.add(matrixBtt[i][j]);
            }
        }
    }
    
    //Me genera el dado para moverme 
    private void movements() {
        diceMov = (int) (Math.random() * 3)+1;
        String textMovs = Integer.toString(diceMov);
        diceMovementsGUI.setText(textMovs);
    }
  
    //Me genera el dado para la precision al disparar
    private void shot(){
        int diceShot;
        diceShot = (int) (Math.random() * 100) + 1;
        String textShot = Integer.toString(diceShot);
        diceShotGUI.setText(textShot+"%");
    }
    
    //AGrega los vehiculos al combo box de jugar
    public void addVehicles(){
        ComboPlayer1.addItem(pd.vehicle1);
        ComboPlayer1.addItem(pd.vehicle2);
        ComboPlayer1.addItem(pd.vehicle3);
        ComboPlayer2.addItem(pd.vehicle4);
        ComboPlayer2.addItem(pd.vehicle5);
        ComboPlayer2.addItem(pd.vehicle6);        
    }

    public void prueba(){
      //  tmp t = new tmp();
      //  System.out.println(t.getTmp());
       // String tmpo = Integer.toString(t.getTmp());
      //  System.out.println(tmpo);
        
//    File URL = new File(pd.ubicacion+pd.registros[0].getName());
        //    try {
                
        //        FileInputStream fis = new FileInputStream(URL);
        //        rp.mostrar.load(fis);
                
        //        pd.vehicle1 = rp.mostrar.getProperty("TipoVehiculo1");
        //        System.out.println("Ella tiene"+pd.vehicle1);
        //        pd.vehicle2 = rp.mostrar.getProperty("TipoVehiculo2");                
        //        System.out.println("Ella tiene"+pd.vehicle2);
        //        pd.vehicle3 = rp.mostrar.getProperty("TipoVehiculo3");
        //        System.out.println("Ella tiene"+pd.vehicle3);
        //    }
        //    catch(Exception e){System.out.println("Fallo"+e);}
            
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BttLeft;
    public javax.swing.JComboBox ComboPlayer1;
    public javax.swing.JComboBox ComboPlayer2;
    private javax.swing.JPanel PanelBattle;
    private javax.swing.JPanel PanelButtons;
    public javax.swing.JLabel Player1;
    public javax.swing.JLabel Player2;
    public javax.swing.JButton bttAddVehicles;
    private javax.swing.JButton bttDown;
    private javax.swing.JButton bttRight;
    private javax.swing.JButton bttUP;
    private javax.swing.JLabel diceMovementsGUI;
    private javax.swing.JLabel diceShotGUI;
    private javax.swing.JLabel diceWildcardGUI;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    public javax.swing.JLabel txt2;
    // End of variables declaration//GEN-END:variables
}